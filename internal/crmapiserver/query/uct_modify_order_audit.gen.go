// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/marmotedu/iam/internal/crmapiserver/model"
)

func newUctModifyOrderAudit(db *gorm.DB, opts ...gen.DOOption) uctModifyOrderAudit {
	_uctModifyOrderAudit := uctModifyOrderAudit{}

	_uctModifyOrderAudit.uctModifyOrderAuditDo.UseDB(db, opts...)
	_uctModifyOrderAudit.uctModifyOrderAuditDo.UseModel(&model.UctModifyOrderAudit{})

	tableName := _uctModifyOrderAudit.uctModifyOrderAuditDo.TableName()
	_uctModifyOrderAudit.ALL = field.NewAsterisk(tableName)
	_uctModifyOrderAudit.ID = field.NewInt64(tableName, "id")
	_uctModifyOrderAudit.OrderID = field.NewInt64(tableName, "order_id")
	_uctModifyOrderAudit.DdAuditID = field.NewString(tableName, "dd_audit_id")
	_uctModifyOrderAudit.OrderType = field.NewInt64(tableName, "order_type")
	_uctModifyOrderAudit.AdminID = field.NewInt64(tableName, "admin_id")
	_uctModifyOrderAudit.FieldList = field.NewString(tableName, "field_list")
	_uctModifyOrderAudit.Status = field.NewInt64(tableName, "status")
	_uctModifyOrderAudit.Createtime = field.NewTime(tableName, "createtime")
	_uctModifyOrderAudit.Updatetime = field.NewTime(tableName, "updatetime")

	_uctModifyOrderAudit.fillFieldMap()

	return _uctModifyOrderAudit
}

type uctModifyOrderAudit struct {
	uctModifyOrderAuditDo uctModifyOrderAuditDo

	ALL        field.Asterisk
	ID         field.Int64
	OrderID    field.Int64  // 订单id
	DdAuditID  field.String // 对应的钉钉审核id
	OrderType  field.Int64  // 订单类型 0采购 1现买现卖 2销售 3送框
	AdminID    field.Int64  // 发起人
	FieldList  field.String // 字段列表
	Status     field.Int64  // 状态  1待分部经理审核  2待运营经理审核  3待财务助理审核  4拒绝  5通过
	Createtime field.Time   // 创建时间
	Updatetime field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (u uctModifyOrderAudit) Table(newTableName string) *uctModifyOrderAudit {
	u.uctModifyOrderAuditDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uctModifyOrderAudit) As(alias string) *uctModifyOrderAudit {
	u.uctModifyOrderAuditDo.DO = *(u.uctModifyOrderAuditDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uctModifyOrderAudit) updateTableName(table string) *uctModifyOrderAudit {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.OrderID = field.NewInt64(table, "order_id")
	u.DdAuditID = field.NewString(table, "dd_audit_id")
	u.OrderType = field.NewInt64(table, "order_type")
	u.AdminID = field.NewInt64(table, "admin_id")
	u.FieldList = field.NewString(table, "field_list")
	u.Status = field.NewInt64(table, "status")
	u.Createtime = field.NewTime(table, "createtime")
	u.Updatetime = field.NewTime(table, "updatetime")

	u.fillFieldMap()

	return u
}

func (u *uctModifyOrderAudit) WithContext(ctx context.Context) IUctModifyOrderAuditDo {
	return u.uctModifyOrderAuditDo.WithContext(ctx)
}

func (u uctModifyOrderAudit) TableName() string { return u.uctModifyOrderAuditDo.TableName() }

func (u uctModifyOrderAudit) Alias() string { return u.uctModifyOrderAuditDo.Alias() }

func (u *uctModifyOrderAudit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uctModifyOrderAudit) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["order_id"] = u.OrderID
	u.fieldMap["dd_audit_id"] = u.DdAuditID
	u.fieldMap["order_type"] = u.OrderType
	u.fieldMap["admin_id"] = u.AdminID
	u.fieldMap["field_list"] = u.FieldList
	u.fieldMap["status"] = u.Status
	u.fieldMap["createtime"] = u.Createtime
	u.fieldMap["updatetime"] = u.Updatetime
}

func (u uctModifyOrderAudit) clone(db *gorm.DB) uctModifyOrderAudit {
	u.uctModifyOrderAuditDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uctModifyOrderAudit) replaceDB(db *gorm.DB) uctModifyOrderAudit {
	u.uctModifyOrderAuditDo.ReplaceDB(db)
	return u
}

type uctModifyOrderAuditDo struct{ gen.DO }

type IUctModifyOrderAuditDo interface {
	gen.SubQuery
	Debug() IUctModifyOrderAuditDo
	WithContext(ctx context.Context) IUctModifyOrderAuditDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUctModifyOrderAuditDo
	WriteDB() IUctModifyOrderAuditDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUctModifyOrderAuditDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUctModifyOrderAuditDo
	Not(conds ...gen.Condition) IUctModifyOrderAuditDo
	Or(conds ...gen.Condition) IUctModifyOrderAuditDo
	Select(conds ...field.Expr) IUctModifyOrderAuditDo
	Where(conds ...gen.Condition) IUctModifyOrderAuditDo
	Order(conds ...field.Expr) IUctModifyOrderAuditDo
	Distinct(cols ...field.Expr) IUctModifyOrderAuditDo
	Omit(cols ...field.Expr) IUctModifyOrderAuditDo
	Join(table schema.Tabler, on ...field.Expr) IUctModifyOrderAuditDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUctModifyOrderAuditDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUctModifyOrderAuditDo
	Group(cols ...field.Expr) IUctModifyOrderAuditDo
	Having(conds ...gen.Condition) IUctModifyOrderAuditDo
	Limit(limit int) IUctModifyOrderAuditDo
	Offset(offset int) IUctModifyOrderAuditDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUctModifyOrderAuditDo
	Unscoped() IUctModifyOrderAuditDo
	Create(values ...*model.UctModifyOrderAudit) error
	CreateInBatches(values []*model.UctModifyOrderAudit, batchSize int) error
	Save(values ...*model.UctModifyOrderAudit) error
	First() (*model.UctModifyOrderAudit, error)
	Take() (*model.UctModifyOrderAudit, error)
	Last() (*model.UctModifyOrderAudit, error)
	Find() ([]*model.UctModifyOrderAudit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctModifyOrderAudit, err error)
	FindInBatches(result *[]*model.UctModifyOrderAudit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UctModifyOrderAudit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUctModifyOrderAuditDo
	Assign(attrs ...field.AssignExpr) IUctModifyOrderAuditDo
	Joins(fields ...field.RelationField) IUctModifyOrderAuditDo
	Preload(fields ...field.RelationField) IUctModifyOrderAuditDo
	FirstOrInit() (*model.UctModifyOrderAudit, error)
	FirstOrCreate() (*model.UctModifyOrderAudit, error)
	FindByPage(offset int, limit int) (result []*model.UctModifyOrderAudit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUctModifyOrderAuditDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uctModifyOrderAuditDo) Debug() IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Debug())
}

func (u uctModifyOrderAuditDo) WithContext(ctx context.Context) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uctModifyOrderAuditDo) ReadDB() IUctModifyOrderAuditDo {
	return u.Clauses(dbresolver.Read)
}

func (u uctModifyOrderAuditDo) WriteDB() IUctModifyOrderAuditDo {
	return u.Clauses(dbresolver.Write)
}

func (u uctModifyOrderAuditDo) Session(config *gorm.Session) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Session(config))
}

func (u uctModifyOrderAuditDo) Clauses(conds ...clause.Expression) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uctModifyOrderAuditDo) Returning(value interface{}, columns ...string) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uctModifyOrderAuditDo) Not(conds ...gen.Condition) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uctModifyOrderAuditDo) Or(conds ...gen.Condition) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uctModifyOrderAuditDo) Select(conds ...field.Expr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uctModifyOrderAuditDo) Where(conds ...gen.Condition) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uctModifyOrderAuditDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUctModifyOrderAuditDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uctModifyOrderAuditDo) Order(conds ...field.Expr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uctModifyOrderAuditDo) Distinct(cols ...field.Expr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uctModifyOrderAuditDo) Omit(cols ...field.Expr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uctModifyOrderAuditDo) Join(table schema.Tabler, on ...field.Expr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uctModifyOrderAuditDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uctModifyOrderAuditDo) RightJoin(table schema.Tabler, on ...field.Expr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uctModifyOrderAuditDo) Group(cols ...field.Expr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uctModifyOrderAuditDo) Having(conds ...gen.Condition) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uctModifyOrderAuditDo) Limit(limit int) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uctModifyOrderAuditDo) Offset(offset int) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uctModifyOrderAuditDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uctModifyOrderAuditDo) Unscoped() IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uctModifyOrderAuditDo) Create(values ...*model.UctModifyOrderAudit) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uctModifyOrderAuditDo) CreateInBatches(values []*model.UctModifyOrderAudit, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uctModifyOrderAuditDo) Save(values ...*model.UctModifyOrderAudit) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uctModifyOrderAuditDo) First() (*model.UctModifyOrderAudit, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctModifyOrderAudit), nil
	}
}

func (u uctModifyOrderAuditDo) Take() (*model.UctModifyOrderAudit, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctModifyOrderAudit), nil
	}
}

func (u uctModifyOrderAuditDo) Last() (*model.UctModifyOrderAudit, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctModifyOrderAudit), nil
	}
}

func (u uctModifyOrderAuditDo) Find() ([]*model.UctModifyOrderAudit, error) {
	result, err := u.DO.Find()
	return result.([]*model.UctModifyOrderAudit), err
}

func (u uctModifyOrderAuditDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctModifyOrderAudit, err error) {
	buf := make([]*model.UctModifyOrderAudit, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uctModifyOrderAuditDo) FindInBatches(result *[]*model.UctModifyOrderAudit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uctModifyOrderAuditDo) Attrs(attrs ...field.AssignExpr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uctModifyOrderAuditDo) Assign(attrs ...field.AssignExpr) IUctModifyOrderAuditDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uctModifyOrderAuditDo) Joins(fields ...field.RelationField) IUctModifyOrderAuditDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uctModifyOrderAuditDo) Preload(fields ...field.RelationField) IUctModifyOrderAuditDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uctModifyOrderAuditDo) FirstOrInit() (*model.UctModifyOrderAudit, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctModifyOrderAudit), nil
	}
}

func (u uctModifyOrderAuditDo) FirstOrCreate() (*model.UctModifyOrderAudit, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctModifyOrderAudit), nil
	}
}

func (u uctModifyOrderAuditDo) FindByPage(offset int, limit int) (result []*model.UctModifyOrderAudit, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uctModifyOrderAuditDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uctModifyOrderAuditDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uctModifyOrderAuditDo) Delete(models ...*model.UctModifyOrderAudit) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uctModifyOrderAuditDo) withDO(do gen.Dao) *uctModifyOrderAuditDo {
	u.DO = *do.(*gen.DO)
	return u
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/marmotedu/iam/internal/crmapiserver/model"
)

func newUctWasteCustomerGathering(db *gorm.DB, opts ...gen.DOOption) uctWasteCustomerGathering {
	_uctWasteCustomerGathering := uctWasteCustomerGathering{}

	_uctWasteCustomerGathering.uctWasteCustomerGatheringDo.UseDB(db, opts...)
	_uctWasteCustomerGathering.uctWasteCustomerGatheringDo.UseModel(&model.UctWasteCustomerGathering{})

	tableName := _uctWasteCustomerGathering.uctWasteCustomerGatheringDo.TableName()
	_uctWasteCustomerGathering.ALL = field.NewAsterisk(tableName)
	_uctWasteCustomerGathering.ID = field.NewInt64(tableName, "id")
	_uctWasteCustomerGathering.CustomerID = field.NewInt64(tableName, "customer_id")
	_uctWasteCustomerGathering.Receiver = field.NewString(tableName, "receiver")
	_uctWasteCustomerGathering.BankAccount = field.NewString(tableName, "bank_account")
	_uctWasteCustomerGathering.DepositBank = field.NewString(tableName, "deposit_bank")
	_uctWasteCustomerGathering.DepositAddress = field.NewString(tableName, "deposit_address")
	_uctWasteCustomerGathering.Createtime = field.NewInt64(tableName, "createtime")
	_uctWasteCustomerGathering.Updatetime = field.NewInt64(tableName, "updatetime")

	_uctWasteCustomerGathering.fillFieldMap()

	return _uctWasteCustomerGathering
}

type uctWasteCustomerGathering struct {
	uctWasteCustomerGatheringDo uctWasteCustomerGatheringDo

	ALL            field.Asterisk
	ID             field.Int64  // ID
	CustomerID     field.Int64  // 客户ID
	Receiver       field.String // 收款人
	BankAccount    field.String // 银行账号
	DepositBank    field.String // 开户银行
	DepositAddress field.String // 开户地址
	Createtime     field.Int64  // 创建时间
	Updatetime     field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (u uctWasteCustomerGathering) Table(newTableName string) *uctWasteCustomerGathering {
	u.uctWasteCustomerGatheringDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uctWasteCustomerGathering) As(alias string) *uctWasteCustomerGathering {
	u.uctWasteCustomerGatheringDo.DO = *(u.uctWasteCustomerGatheringDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uctWasteCustomerGathering) updateTableName(table string) *uctWasteCustomerGathering {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CustomerID = field.NewInt64(table, "customer_id")
	u.Receiver = field.NewString(table, "receiver")
	u.BankAccount = field.NewString(table, "bank_account")
	u.DepositBank = field.NewString(table, "deposit_bank")
	u.DepositAddress = field.NewString(table, "deposit_address")
	u.Createtime = field.NewInt64(table, "createtime")
	u.Updatetime = field.NewInt64(table, "updatetime")

	u.fillFieldMap()

	return u
}

func (u *uctWasteCustomerGathering) WithContext(ctx context.Context) IUctWasteCustomerGatheringDo {
	return u.uctWasteCustomerGatheringDo.WithContext(ctx)
}

func (u uctWasteCustomerGathering) TableName() string {
	return u.uctWasteCustomerGatheringDo.TableName()
}

func (u uctWasteCustomerGathering) Alias() string { return u.uctWasteCustomerGatheringDo.Alias() }

func (u *uctWasteCustomerGathering) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uctWasteCustomerGathering) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["customer_id"] = u.CustomerID
	u.fieldMap["receiver"] = u.Receiver
	u.fieldMap["bank_account"] = u.BankAccount
	u.fieldMap["deposit_bank"] = u.DepositBank
	u.fieldMap["deposit_address"] = u.DepositAddress
	u.fieldMap["createtime"] = u.Createtime
	u.fieldMap["updatetime"] = u.Updatetime
}

func (u uctWasteCustomerGathering) clone(db *gorm.DB) uctWasteCustomerGathering {
	u.uctWasteCustomerGatheringDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uctWasteCustomerGathering) replaceDB(db *gorm.DB) uctWasteCustomerGathering {
	u.uctWasteCustomerGatheringDo.ReplaceDB(db)
	return u
}

type uctWasteCustomerGatheringDo struct{ gen.DO }

type IUctWasteCustomerGatheringDo interface {
	gen.SubQuery
	Debug() IUctWasteCustomerGatheringDo
	WithContext(ctx context.Context) IUctWasteCustomerGatheringDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUctWasteCustomerGatheringDo
	WriteDB() IUctWasteCustomerGatheringDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUctWasteCustomerGatheringDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUctWasteCustomerGatheringDo
	Not(conds ...gen.Condition) IUctWasteCustomerGatheringDo
	Or(conds ...gen.Condition) IUctWasteCustomerGatheringDo
	Select(conds ...field.Expr) IUctWasteCustomerGatheringDo
	Where(conds ...gen.Condition) IUctWasteCustomerGatheringDo
	Order(conds ...field.Expr) IUctWasteCustomerGatheringDo
	Distinct(cols ...field.Expr) IUctWasteCustomerGatheringDo
	Omit(cols ...field.Expr) IUctWasteCustomerGatheringDo
	Join(table schema.Tabler, on ...field.Expr) IUctWasteCustomerGatheringDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUctWasteCustomerGatheringDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUctWasteCustomerGatheringDo
	Group(cols ...field.Expr) IUctWasteCustomerGatheringDo
	Having(conds ...gen.Condition) IUctWasteCustomerGatheringDo
	Limit(limit int) IUctWasteCustomerGatheringDo
	Offset(offset int) IUctWasteCustomerGatheringDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUctWasteCustomerGatheringDo
	Unscoped() IUctWasteCustomerGatheringDo
	Create(values ...*model.UctWasteCustomerGathering) error
	CreateInBatches(values []*model.UctWasteCustomerGathering, batchSize int) error
	Save(values ...*model.UctWasteCustomerGathering) error
	First() (*model.UctWasteCustomerGathering, error)
	Take() (*model.UctWasteCustomerGathering, error)
	Last() (*model.UctWasteCustomerGathering, error)
	Find() ([]*model.UctWasteCustomerGathering, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctWasteCustomerGathering, err error)
	FindInBatches(result *[]*model.UctWasteCustomerGathering, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UctWasteCustomerGathering) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUctWasteCustomerGatheringDo
	Assign(attrs ...field.AssignExpr) IUctWasteCustomerGatheringDo
	Joins(fields ...field.RelationField) IUctWasteCustomerGatheringDo
	Preload(fields ...field.RelationField) IUctWasteCustomerGatheringDo
	FirstOrInit() (*model.UctWasteCustomerGathering, error)
	FirstOrCreate() (*model.UctWasteCustomerGathering, error)
	FindByPage(offset int, limit int) (result []*model.UctWasteCustomerGathering, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUctWasteCustomerGatheringDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uctWasteCustomerGatheringDo) Debug() IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Debug())
}

func (u uctWasteCustomerGatheringDo) WithContext(ctx context.Context) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uctWasteCustomerGatheringDo) ReadDB() IUctWasteCustomerGatheringDo {
	return u.Clauses(dbresolver.Read)
}

func (u uctWasteCustomerGatheringDo) WriteDB() IUctWasteCustomerGatheringDo {
	return u.Clauses(dbresolver.Write)
}

func (u uctWasteCustomerGatheringDo) Session(config *gorm.Session) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Session(config))
}

func (u uctWasteCustomerGatheringDo) Clauses(conds ...clause.Expression) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uctWasteCustomerGatheringDo) Returning(value interface{}, columns ...string) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uctWasteCustomerGatheringDo) Not(conds ...gen.Condition) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uctWasteCustomerGatheringDo) Or(conds ...gen.Condition) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uctWasteCustomerGatheringDo) Select(conds ...field.Expr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uctWasteCustomerGatheringDo) Where(conds ...gen.Condition) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uctWasteCustomerGatheringDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUctWasteCustomerGatheringDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uctWasteCustomerGatheringDo) Order(conds ...field.Expr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uctWasteCustomerGatheringDo) Distinct(cols ...field.Expr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uctWasteCustomerGatheringDo) Omit(cols ...field.Expr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uctWasteCustomerGatheringDo) Join(table schema.Tabler, on ...field.Expr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uctWasteCustomerGatheringDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uctWasteCustomerGatheringDo) RightJoin(table schema.Tabler, on ...field.Expr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uctWasteCustomerGatheringDo) Group(cols ...field.Expr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uctWasteCustomerGatheringDo) Having(conds ...gen.Condition) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uctWasteCustomerGatheringDo) Limit(limit int) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uctWasteCustomerGatheringDo) Offset(offset int) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uctWasteCustomerGatheringDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uctWasteCustomerGatheringDo) Unscoped() IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uctWasteCustomerGatheringDo) Create(values ...*model.UctWasteCustomerGathering) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uctWasteCustomerGatheringDo) CreateInBatches(values []*model.UctWasteCustomerGathering, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uctWasteCustomerGatheringDo) Save(values ...*model.UctWasteCustomerGathering) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uctWasteCustomerGatheringDo) First() (*model.UctWasteCustomerGathering, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctWasteCustomerGathering), nil
	}
}

func (u uctWasteCustomerGatheringDo) Take() (*model.UctWasteCustomerGathering, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctWasteCustomerGathering), nil
	}
}

func (u uctWasteCustomerGatheringDo) Last() (*model.UctWasteCustomerGathering, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctWasteCustomerGathering), nil
	}
}

func (u uctWasteCustomerGatheringDo) Find() ([]*model.UctWasteCustomerGathering, error) {
	result, err := u.DO.Find()
	return result.([]*model.UctWasteCustomerGathering), err
}

func (u uctWasteCustomerGatheringDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctWasteCustomerGathering, err error) {
	buf := make([]*model.UctWasteCustomerGathering, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uctWasteCustomerGatheringDo) FindInBatches(result *[]*model.UctWasteCustomerGathering, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uctWasteCustomerGatheringDo) Attrs(attrs ...field.AssignExpr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uctWasteCustomerGatheringDo) Assign(attrs ...field.AssignExpr) IUctWasteCustomerGatheringDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uctWasteCustomerGatheringDo) Joins(fields ...field.RelationField) IUctWasteCustomerGatheringDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uctWasteCustomerGatheringDo) Preload(fields ...field.RelationField) IUctWasteCustomerGatheringDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uctWasteCustomerGatheringDo) FirstOrInit() (*model.UctWasteCustomerGathering, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctWasteCustomerGathering), nil
	}
}

func (u uctWasteCustomerGatheringDo) FirstOrCreate() (*model.UctWasteCustomerGathering, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctWasteCustomerGathering), nil
	}
}

func (u uctWasteCustomerGatheringDo) FindByPage(offset int, limit int) (result []*model.UctWasteCustomerGathering, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uctWasteCustomerGatheringDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uctWasteCustomerGatheringDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uctWasteCustomerGatheringDo) Delete(models ...*model.UctWasteCustomerGathering) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uctWasteCustomerGatheringDo) withDO(do gen.Dao) *uctWasteCustomerGatheringDo {
	u.DO = *do.(*gen.DO)
	return u
}

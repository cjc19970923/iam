// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/marmotedu/iam/internal/crmapiserver/model"
)

func newUctAdmin(db *gorm.DB, opts ...gen.DOOption) uctAdmin {
	_uctAdmin := uctAdmin{}

	_uctAdmin.uctAdminDo.UseDB(db, opts...)
	_uctAdmin.uctAdminDo.UseModel(&model.UctAdmin{})

	tableName := _uctAdmin.uctAdminDo.TableName()
	_uctAdmin.ALL = field.NewAsterisk(tableName)
	_uctAdmin.ID = field.NewInt64(tableName, "id")
	_uctAdmin.BranchID = field.NewInt64(tableName, "branch_id")
	_uctAdmin.EcUserid = field.NewInt64(tableName, "ec_userid")
	_uctAdmin.Crmid = field.NewInt64(tableName, "crmid")
	_uctAdmin.EcLinkid = field.NewString(tableName, "ec_linkid")
	_uctAdmin.StaffAccid = field.NewString(tableName, "staff_accid")
	_uctAdmin.CusAccid = field.NewString(tableName, "cus_accid")
	_uctAdmin.LinkAccid = field.NewString(tableName, "link_accid")
	_uctAdmin.Userid = field.NewString(tableName, "userid")
	_uctAdmin.WechatID = field.NewString(tableName, "wechat_id")
	_uctAdmin.Username = field.NewString(tableName, "username")
	_uctAdmin.Nickname = field.NewString(tableName, "nickname")
	_uctAdmin.Password = field.NewString(tableName, "password")
	_uctAdmin.Salt = field.NewString(tableName, "salt")
	_uctAdmin.Avatar = field.NewString(tableName, "avatar")
	_uctAdmin.Mobile = field.NewString(tableName, "mobile")
	_uctAdmin.Email = field.NewString(tableName, "email")
	_uctAdmin.Loginfailure = field.NewInt64(tableName, "loginfailure")
	_uctAdmin.Logintime = field.NewInt64(tableName, "logintime")
	_uctAdmin.Createtime = field.NewInt64(tableName, "createtime")
	_uctAdmin.Updatetime = field.NewInt64(tableName, "updatetime")
	_uctAdmin.Token = field.NewString(tableName, "token")
	_uctAdmin.LastAppletid = field.NewString(tableName, "last_appletid")
	_uctAdmin.Status = field.NewString(tableName, "status")

	_uctAdmin.fillFieldMap()

	return _uctAdmin
}

type uctAdmin struct {
	uctAdminDo uctAdminDo

	ALL          field.Asterisk
	ID           field.Int64  // ID
	BranchID     field.Int64  // 分部ID
	EcUserid     field.Int64  // ec员工id
	Crmid        field.Int64  // ec系统id
	EcLinkid     field.String // ec系统联系人id
	StaffAccid   field.String // 互客系统员工id
	CusAccid     field.String // 互客系统客户id
	LinkAccid    field.String // 互客系统客户联系人id
	Userid       field.String // 钉钉id
	WechatID     field.String // 企业微信id
	Username     field.String // 用户名
	Nickname     field.String // 昵称
	Password     field.String // 密码
	Salt         field.String // 密码盐
	Avatar       field.String // 头像
	Mobile       field.String // 手机号
	Email        field.String // 电子邮箱
	Loginfailure field.Int64  // 失败次数
	Logintime    field.Int64  // 登录时间
	Createtime   field.Int64  // 创建时间
	Updatetime   field.Int64  // 更新时间
	Token        field.String // Session标识
	LastAppletid field.String // 最近操作的应用标识
	Status       field.String // 状态 normal正常  hidden隐藏

	fieldMap map[string]field.Expr
}

func (u uctAdmin) Table(newTableName string) *uctAdmin {
	u.uctAdminDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uctAdmin) As(alias string) *uctAdmin {
	u.uctAdminDo.DO = *(u.uctAdminDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uctAdmin) updateTableName(table string) *uctAdmin {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.BranchID = field.NewInt64(table, "branch_id")
	u.EcUserid = field.NewInt64(table, "ec_userid")
	u.Crmid = field.NewInt64(table, "crmid")
	u.EcLinkid = field.NewString(table, "ec_linkid")
	u.StaffAccid = field.NewString(table, "staff_accid")
	u.CusAccid = field.NewString(table, "cus_accid")
	u.LinkAccid = field.NewString(table, "link_accid")
	u.Userid = field.NewString(table, "userid")
	u.WechatID = field.NewString(table, "wechat_id")
	u.Username = field.NewString(table, "username")
	u.Nickname = field.NewString(table, "nickname")
	u.Password = field.NewString(table, "password")
	u.Salt = field.NewString(table, "salt")
	u.Avatar = field.NewString(table, "avatar")
	u.Mobile = field.NewString(table, "mobile")
	u.Email = field.NewString(table, "email")
	u.Loginfailure = field.NewInt64(table, "loginfailure")
	u.Logintime = field.NewInt64(table, "logintime")
	u.Createtime = field.NewInt64(table, "createtime")
	u.Updatetime = field.NewInt64(table, "updatetime")
	u.Token = field.NewString(table, "token")
	u.LastAppletid = field.NewString(table, "last_appletid")
	u.Status = field.NewString(table, "status")

	u.fillFieldMap()

	return u
}

func (u *uctAdmin) WithContext(ctx context.Context) IUctAdminDo { return u.uctAdminDo.WithContext(ctx) }

func (u uctAdmin) TableName() string { return u.uctAdminDo.TableName() }

func (u uctAdmin) Alias() string { return u.uctAdminDo.Alias() }

func (u *uctAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uctAdmin) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 24)
	u.fieldMap["id"] = u.ID
	u.fieldMap["branch_id"] = u.BranchID
	u.fieldMap["ec_userid"] = u.EcUserid
	u.fieldMap["crmid"] = u.Crmid
	u.fieldMap["ec_linkid"] = u.EcLinkid
	u.fieldMap["staff_accid"] = u.StaffAccid
	u.fieldMap["cus_accid"] = u.CusAccid
	u.fieldMap["link_accid"] = u.LinkAccid
	u.fieldMap["userid"] = u.Userid
	u.fieldMap["wechat_id"] = u.WechatID
	u.fieldMap["username"] = u.Username
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["password"] = u.Password
	u.fieldMap["salt"] = u.Salt
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["mobile"] = u.Mobile
	u.fieldMap["email"] = u.Email
	u.fieldMap["loginfailure"] = u.Loginfailure
	u.fieldMap["logintime"] = u.Logintime
	u.fieldMap["createtime"] = u.Createtime
	u.fieldMap["updatetime"] = u.Updatetime
	u.fieldMap["token"] = u.Token
	u.fieldMap["last_appletid"] = u.LastAppletid
	u.fieldMap["status"] = u.Status
}

func (u uctAdmin) clone(db *gorm.DB) uctAdmin {
	u.uctAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uctAdmin) replaceDB(db *gorm.DB) uctAdmin {
	u.uctAdminDo.ReplaceDB(db)
	return u
}

type uctAdminDo struct{ gen.DO }

type IUctAdminDo interface {
	gen.SubQuery
	Debug() IUctAdminDo
	WithContext(ctx context.Context) IUctAdminDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUctAdminDo
	WriteDB() IUctAdminDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUctAdminDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUctAdminDo
	Not(conds ...gen.Condition) IUctAdminDo
	Or(conds ...gen.Condition) IUctAdminDo
	Select(conds ...field.Expr) IUctAdminDo
	Where(conds ...gen.Condition) IUctAdminDo
	Order(conds ...field.Expr) IUctAdminDo
	Distinct(cols ...field.Expr) IUctAdminDo
	Omit(cols ...field.Expr) IUctAdminDo
	Join(table schema.Tabler, on ...field.Expr) IUctAdminDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUctAdminDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUctAdminDo
	Group(cols ...field.Expr) IUctAdminDo
	Having(conds ...gen.Condition) IUctAdminDo
	Limit(limit int) IUctAdminDo
	Offset(offset int) IUctAdminDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUctAdminDo
	Unscoped() IUctAdminDo
	Create(values ...*model.UctAdmin) error
	CreateInBatches(values []*model.UctAdmin, batchSize int) error
	Save(values ...*model.UctAdmin) error
	First() (*model.UctAdmin, error)
	Take() (*model.UctAdmin, error)
	Last() (*model.UctAdmin, error)
	Find() ([]*model.UctAdmin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctAdmin, err error)
	FindInBatches(result *[]*model.UctAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UctAdmin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUctAdminDo
	Assign(attrs ...field.AssignExpr) IUctAdminDo
	Joins(fields ...field.RelationField) IUctAdminDo
	Preload(fields ...field.RelationField) IUctAdminDo
	FirstOrInit() (*model.UctAdmin, error)
	FirstOrCreate() (*model.UctAdmin, error)
	FindByPage(offset int, limit int) (result []*model.UctAdmin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUctAdminDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uctAdminDo) Debug() IUctAdminDo {
	return u.withDO(u.DO.Debug())
}

func (u uctAdminDo) WithContext(ctx context.Context) IUctAdminDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uctAdminDo) ReadDB() IUctAdminDo {
	return u.Clauses(dbresolver.Read)
}

func (u uctAdminDo) WriteDB() IUctAdminDo {
	return u.Clauses(dbresolver.Write)
}

func (u uctAdminDo) Session(config *gorm.Session) IUctAdminDo {
	return u.withDO(u.DO.Session(config))
}

func (u uctAdminDo) Clauses(conds ...clause.Expression) IUctAdminDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uctAdminDo) Returning(value interface{}, columns ...string) IUctAdminDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uctAdminDo) Not(conds ...gen.Condition) IUctAdminDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uctAdminDo) Or(conds ...gen.Condition) IUctAdminDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uctAdminDo) Select(conds ...field.Expr) IUctAdminDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uctAdminDo) Where(conds ...gen.Condition) IUctAdminDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uctAdminDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUctAdminDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uctAdminDo) Order(conds ...field.Expr) IUctAdminDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uctAdminDo) Distinct(cols ...field.Expr) IUctAdminDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uctAdminDo) Omit(cols ...field.Expr) IUctAdminDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uctAdminDo) Join(table schema.Tabler, on ...field.Expr) IUctAdminDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uctAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUctAdminDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uctAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) IUctAdminDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uctAdminDo) Group(cols ...field.Expr) IUctAdminDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uctAdminDo) Having(conds ...gen.Condition) IUctAdminDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uctAdminDo) Limit(limit int) IUctAdminDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uctAdminDo) Offset(offset int) IUctAdminDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uctAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUctAdminDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uctAdminDo) Unscoped() IUctAdminDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uctAdminDo) Create(values ...*model.UctAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uctAdminDo) CreateInBatches(values []*model.UctAdmin, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uctAdminDo) Save(values ...*model.UctAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uctAdminDo) First() (*model.UctAdmin, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctAdmin), nil
	}
}

func (u uctAdminDo) Take() (*model.UctAdmin, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctAdmin), nil
	}
}

func (u uctAdminDo) Last() (*model.UctAdmin, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctAdmin), nil
	}
}

func (u uctAdminDo) Find() ([]*model.UctAdmin, error) {
	result, err := u.DO.Find()
	return result.([]*model.UctAdmin), err
}

func (u uctAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctAdmin, err error) {
	buf := make([]*model.UctAdmin, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uctAdminDo) FindInBatches(result *[]*model.UctAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uctAdminDo) Attrs(attrs ...field.AssignExpr) IUctAdminDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uctAdminDo) Assign(attrs ...field.AssignExpr) IUctAdminDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uctAdminDo) Joins(fields ...field.RelationField) IUctAdminDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uctAdminDo) Preload(fields ...field.RelationField) IUctAdminDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uctAdminDo) FirstOrInit() (*model.UctAdmin, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctAdmin), nil
	}
}

func (u uctAdminDo) FirstOrCreate() (*model.UctAdmin, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctAdmin), nil
	}
}

func (u uctAdminDo) FindByPage(offset int, limit int) (result []*model.UctAdmin, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uctAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uctAdminDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uctAdminDo) Delete(models ...*model.UctAdmin) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uctAdminDo) withDO(do gen.Dao) *uctAdminDo {
	u.DO = *do.(*gen.DO)
	return u
}

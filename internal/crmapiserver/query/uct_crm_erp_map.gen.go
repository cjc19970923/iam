// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/marmotedu/iam/internal/crmapiserver/model"
)

func newUctCrmErpMap(db *gorm.DB, opts ...gen.DOOption) uctCrmErpMap {
	_uctCrmErpMap := uctCrmErpMap{}

	_uctCrmErpMap.uctCrmErpMapDo.UseDB(db, opts...)
	_uctCrmErpMap.uctCrmErpMapDo.UseModel(&model.UctCrmErpMap{})

	tableName := _uctCrmErpMap.uctCrmErpMapDo.TableName()
	_uctCrmErpMap.ALL = field.NewAsterisk(tableName)
	_uctCrmErpMap.ID = field.NewInt64(tableName, "id")
	_uctCrmErpMap.Crm = field.NewString(tableName, "crm")
	_uctCrmErpMap.Type = field.NewString(tableName, "type")
	_uctCrmErpMap.FieldMap = field.NewString(tableName, "field_map")
	_uctCrmErpMap.CrmToErp = field.NewString(tableName, "crm_to_erp")
	_uctCrmErpMap.ErpToCrm = field.NewString(tableName, "erp_to_crm")
	_uctCrmErpMap.FieldMapLink = field.NewString(tableName, "field_map_link")
	_uctCrmErpMap.CrmToErpLink = field.NewString(tableName, "crm_to_erp_link")
	_uctCrmErpMap.ErpToCrmLink = field.NewString(tableName, "erp_to_crm_link")

	_uctCrmErpMap.fillFieldMap()

	return _uctCrmErpMap
}

type uctCrmErpMap struct {
	uctCrmErpMapDo uctCrmErpMapDo

	ALL          field.Asterisk
	ID           field.Int64
	Crm          field.String // 系统名称
	Type         field.String // 客户类型
	FieldMap     field.String
	CrmToErp     field.String
	ErpToCrm     field.String
	FieldMapLink field.String
	CrmToErpLink field.String
	ErpToCrmLink field.String

	fieldMap map[string]field.Expr
}

func (u uctCrmErpMap) Table(newTableName string) *uctCrmErpMap {
	u.uctCrmErpMapDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uctCrmErpMap) As(alias string) *uctCrmErpMap {
	u.uctCrmErpMapDo.DO = *(u.uctCrmErpMapDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uctCrmErpMap) updateTableName(table string) *uctCrmErpMap {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Crm = field.NewString(table, "crm")
	u.Type = field.NewString(table, "type")
	u.FieldMap = field.NewString(table, "field_map")
	u.CrmToErp = field.NewString(table, "crm_to_erp")
	u.ErpToCrm = field.NewString(table, "erp_to_crm")
	u.FieldMapLink = field.NewString(table, "field_map_link")
	u.CrmToErpLink = field.NewString(table, "crm_to_erp_link")
	u.ErpToCrmLink = field.NewString(table, "erp_to_crm_link")

	u.fillFieldMap()

	return u
}

func (u *uctCrmErpMap) WithContext(ctx context.Context) IUctCrmErpMapDo {
	return u.uctCrmErpMapDo.WithContext(ctx)
}

func (u uctCrmErpMap) TableName() string { return u.uctCrmErpMapDo.TableName() }

func (u uctCrmErpMap) Alias() string { return u.uctCrmErpMapDo.Alias() }

func (u *uctCrmErpMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uctCrmErpMap) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["crm"] = u.Crm
	u.fieldMap["type"] = u.Type
	u.fieldMap["field_map"] = u.FieldMap
	u.fieldMap["crm_to_erp"] = u.CrmToErp
	u.fieldMap["erp_to_crm"] = u.ErpToCrm
	u.fieldMap["field_map_link"] = u.FieldMapLink
	u.fieldMap["crm_to_erp_link"] = u.CrmToErpLink
	u.fieldMap["erp_to_crm_link"] = u.ErpToCrmLink
}

func (u uctCrmErpMap) clone(db *gorm.DB) uctCrmErpMap {
	u.uctCrmErpMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uctCrmErpMap) replaceDB(db *gorm.DB) uctCrmErpMap {
	u.uctCrmErpMapDo.ReplaceDB(db)
	return u
}

type uctCrmErpMapDo struct{ gen.DO }

type IUctCrmErpMapDo interface {
	gen.SubQuery
	Debug() IUctCrmErpMapDo
	WithContext(ctx context.Context) IUctCrmErpMapDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUctCrmErpMapDo
	WriteDB() IUctCrmErpMapDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUctCrmErpMapDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUctCrmErpMapDo
	Not(conds ...gen.Condition) IUctCrmErpMapDo
	Or(conds ...gen.Condition) IUctCrmErpMapDo
	Select(conds ...field.Expr) IUctCrmErpMapDo
	Where(conds ...gen.Condition) IUctCrmErpMapDo
	Order(conds ...field.Expr) IUctCrmErpMapDo
	Distinct(cols ...field.Expr) IUctCrmErpMapDo
	Omit(cols ...field.Expr) IUctCrmErpMapDo
	Join(table schema.Tabler, on ...field.Expr) IUctCrmErpMapDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUctCrmErpMapDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUctCrmErpMapDo
	Group(cols ...field.Expr) IUctCrmErpMapDo
	Having(conds ...gen.Condition) IUctCrmErpMapDo
	Limit(limit int) IUctCrmErpMapDo
	Offset(offset int) IUctCrmErpMapDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUctCrmErpMapDo
	Unscoped() IUctCrmErpMapDo
	Create(values ...*model.UctCrmErpMap) error
	CreateInBatches(values []*model.UctCrmErpMap, batchSize int) error
	Save(values ...*model.UctCrmErpMap) error
	First() (*model.UctCrmErpMap, error)
	Take() (*model.UctCrmErpMap, error)
	Last() (*model.UctCrmErpMap, error)
	Find() ([]*model.UctCrmErpMap, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctCrmErpMap, err error)
	FindInBatches(result *[]*model.UctCrmErpMap, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UctCrmErpMap) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUctCrmErpMapDo
	Assign(attrs ...field.AssignExpr) IUctCrmErpMapDo
	Joins(fields ...field.RelationField) IUctCrmErpMapDo
	Preload(fields ...field.RelationField) IUctCrmErpMapDo
	FirstOrInit() (*model.UctCrmErpMap, error)
	FirstOrCreate() (*model.UctCrmErpMap, error)
	FindByPage(offset int, limit int) (result []*model.UctCrmErpMap, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUctCrmErpMapDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uctCrmErpMapDo) Debug() IUctCrmErpMapDo {
	return u.withDO(u.DO.Debug())
}

func (u uctCrmErpMapDo) WithContext(ctx context.Context) IUctCrmErpMapDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uctCrmErpMapDo) ReadDB() IUctCrmErpMapDo {
	return u.Clauses(dbresolver.Read)
}

func (u uctCrmErpMapDo) WriteDB() IUctCrmErpMapDo {
	return u.Clauses(dbresolver.Write)
}

func (u uctCrmErpMapDo) Session(config *gorm.Session) IUctCrmErpMapDo {
	return u.withDO(u.DO.Session(config))
}

func (u uctCrmErpMapDo) Clauses(conds ...clause.Expression) IUctCrmErpMapDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uctCrmErpMapDo) Returning(value interface{}, columns ...string) IUctCrmErpMapDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uctCrmErpMapDo) Not(conds ...gen.Condition) IUctCrmErpMapDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uctCrmErpMapDo) Or(conds ...gen.Condition) IUctCrmErpMapDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uctCrmErpMapDo) Select(conds ...field.Expr) IUctCrmErpMapDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uctCrmErpMapDo) Where(conds ...gen.Condition) IUctCrmErpMapDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uctCrmErpMapDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUctCrmErpMapDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uctCrmErpMapDo) Order(conds ...field.Expr) IUctCrmErpMapDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uctCrmErpMapDo) Distinct(cols ...field.Expr) IUctCrmErpMapDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uctCrmErpMapDo) Omit(cols ...field.Expr) IUctCrmErpMapDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uctCrmErpMapDo) Join(table schema.Tabler, on ...field.Expr) IUctCrmErpMapDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uctCrmErpMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUctCrmErpMapDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uctCrmErpMapDo) RightJoin(table schema.Tabler, on ...field.Expr) IUctCrmErpMapDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uctCrmErpMapDo) Group(cols ...field.Expr) IUctCrmErpMapDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uctCrmErpMapDo) Having(conds ...gen.Condition) IUctCrmErpMapDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uctCrmErpMapDo) Limit(limit int) IUctCrmErpMapDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uctCrmErpMapDo) Offset(offset int) IUctCrmErpMapDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uctCrmErpMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUctCrmErpMapDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uctCrmErpMapDo) Unscoped() IUctCrmErpMapDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uctCrmErpMapDo) Create(values ...*model.UctCrmErpMap) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uctCrmErpMapDo) CreateInBatches(values []*model.UctCrmErpMap, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uctCrmErpMapDo) Save(values ...*model.UctCrmErpMap) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uctCrmErpMapDo) First() (*model.UctCrmErpMap, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctCrmErpMap), nil
	}
}

func (u uctCrmErpMapDo) Take() (*model.UctCrmErpMap, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctCrmErpMap), nil
	}
}

func (u uctCrmErpMapDo) Last() (*model.UctCrmErpMap, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctCrmErpMap), nil
	}
}

func (u uctCrmErpMapDo) Find() ([]*model.UctCrmErpMap, error) {
	result, err := u.DO.Find()
	return result.([]*model.UctCrmErpMap), err
}

func (u uctCrmErpMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctCrmErpMap, err error) {
	buf := make([]*model.UctCrmErpMap, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uctCrmErpMapDo) FindInBatches(result *[]*model.UctCrmErpMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uctCrmErpMapDo) Attrs(attrs ...field.AssignExpr) IUctCrmErpMapDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uctCrmErpMapDo) Assign(attrs ...field.AssignExpr) IUctCrmErpMapDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uctCrmErpMapDo) Joins(fields ...field.RelationField) IUctCrmErpMapDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uctCrmErpMapDo) Preload(fields ...field.RelationField) IUctCrmErpMapDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uctCrmErpMapDo) FirstOrInit() (*model.UctCrmErpMap, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctCrmErpMap), nil
	}
}

func (u uctCrmErpMapDo) FirstOrCreate() (*model.UctCrmErpMap, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctCrmErpMap), nil
	}
}

func (u uctCrmErpMapDo) FindByPage(offset int, limit int) (result []*model.UctCrmErpMap, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uctCrmErpMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uctCrmErpMapDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uctCrmErpMapDo) Delete(models ...*model.UctCrmErpMap) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uctCrmErpMapDo) withDO(do gen.Dao) *uctCrmErpMapDo {
	u.DO = *do.(*gen.DO)
	return u
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/marmotedu/iam/internal/crmapiserver/model"
)

func newUctHuke(db *gorm.DB, opts ...gen.DOOption) uctHuke {
	_uctHuke := uctHuke{}

	_uctHuke.uctHukeDo.UseDB(db, opts...)
	_uctHuke.uctHukeDo.UseModel(&model.UctHuke{})

	tableName := _uctHuke.uctHukeDo.TableName()
	_uctHuke.ALL = field.NewAsterisk(tableName)
	_uctHuke.Name = field.NewString(tableName, "name")
	_uctHuke.Type = field.NewString(tableName, "type")
	_uctHuke.CrmType = field.NewString(tableName, "crm_type")
	_uctHuke.Appkey = field.NewString(tableName, "appkey")
	_uctHuke.Appsecret = field.NewString(tableName, "appsecret")
	_uctHuke.Cid = field.NewString(tableName, "cid")
	_uctHuke.Status = field.NewString(tableName, "status")

	_uctHuke.fillFieldMap()

	return _uctHuke
}

type uctHuke struct {
	uctHukeDo uctHukeDo

	ALL       field.Asterisk
	Name      field.String
	Type      field.String
	CrmType   field.String
	Appkey    field.String
	Appsecret field.String
	Cid       field.String
	Status    field.String // enable 启用  disable 禁用

	fieldMap map[string]field.Expr
}

func (u uctHuke) Table(newTableName string) *uctHuke {
	u.uctHukeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u uctHuke) As(alias string) *uctHuke {
	u.uctHukeDo.DO = *(u.uctHukeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *uctHuke) updateTableName(table string) *uctHuke {
	u.ALL = field.NewAsterisk(table)
	u.Name = field.NewString(table, "name")
	u.Type = field.NewString(table, "type")
	u.CrmType = field.NewString(table, "crm_type")
	u.Appkey = field.NewString(table, "appkey")
	u.Appsecret = field.NewString(table, "appsecret")
	u.Cid = field.NewString(table, "cid")
	u.Status = field.NewString(table, "status")

	u.fillFieldMap()

	return u
}

func (u *uctHuke) WithContext(ctx context.Context) IUctHukeDo { return u.uctHukeDo.WithContext(ctx) }

func (u uctHuke) TableName() string { return u.uctHukeDo.TableName() }

func (u uctHuke) Alias() string { return u.uctHukeDo.Alias() }

func (u *uctHuke) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *uctHuke) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["name"] = u.Name
	u.fieldMap["type"] = u.Type
	u.fieldMap["crm_type"] = u.CrmType
	u.fieldMap["appkey"] = u.Appkey
	u.fieldMap["appsecret"] = u.Appsecret
	u.fieldMap["cid"] = u.Cid
	u.fieldMap["status"] = u.Status
}

func (u uctHuke) clone(db *gorm.DB) uctHuke {
	u.uctHukeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u uctHuke) replaceDB(db *gorm.DB) uctHuke {
	u.uctHukeDo.ReplaceDB(db)
	return u
}

type uctHukeDo struct{ gen.DO }

type IUctHukeDo interface {
	gen.SubQuery
	Debug() IUctHukeDo
	WithContext(ctx context.Context) IUctHukeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUctHukeDo
	WriteDB() IUctHukeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUctHukeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUctHukeDo
	Not(conds ...gen.Condition) IUctHukeDo
	Or(conds ...gen.Condition) IUctHukeDo
	Select(conds ...field.Expr) IUctHukeDo
	Where(conds ...gen.Condition) IUctHukeDo
	Order(conds ...field.Expr) IUctHukeDo
	Distinct(cols ...field.Expr) IUctHukeDo
	Omit(cols ...field.Expr) IUctHukeDo
	Join(table schema.Tabler, on ...field.Expr) IUctHukeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUctHukeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUctHukeDo
	Group(cols ...field.Expr) IUctHukeDo
	Having(conds ...gen.Condition) IUctHukeDo
	Limit(limit int) IUctHukeDo
	Offset(offset int) IUctHukeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUctHukeDo
	Unscoped() IUctHukeDo
	Create(values ...*model.UctHuke) error
	CreateInBatches(values []*model.UctHuke, batchSize int) error
	Save(values ...*model.UctHuke) error
	First() (*model.UctHuke, error)
	Take() (*model.UctHuke, error)
	Last() (*model.UctHuke, error)
	Find() ([]*model.UctHuke, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctHuke, err error)
	FindInBatches(result *[]*model.UctHuke, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UctHuke) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUctHukeDo
	Assign(attrs ...field.AssignExpr) IUctHukeDo
	Joins(fields ...field.RelationField) IUctHukeDo
	Preload(fields ...field.RelationField) IUctHukeDo
	FirstOrInit() (*model.UctHuke, error)
	FirstOrCreate() (*model.UctHuke, error)
	FindByPage(offset int, limit int) (result []*model.UctHuke, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUctHukeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u uctHukeDo) Debug() IUctHukeDo {
	return u.withDO(u.DO.Debug())
}

func (u uctHukeDo) WithContext(ctx context.Context) IUctHukeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u uctHukeDo) ReadDB() IUctHukeDo {
	return u.Clauses(dbresolver.Read)
}

func (u uctHukeDo) WriteDB() IUctHukeDo {
	return u.Clauses(dbresolver.Write)
}

func (u uctHukeDo) Session(config *gorm.Session) IUctHukeDo {
	return u.withDO(u.DO.Session(config))
}

func (u uctHukeDo) Clauses(conds ...clause.Expression) IUctHukeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u uctHukeDo) Returning(value interface{}, columns ...string) IUctHukeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u uctHukeDo) Not(conds ...gen.Condition) IUctHukeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u uctHukeDo) Or(conds ...gen.Condition) IUctHukeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u uctHukeDo) Select(conds ...field.Expr) IUctHukeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u uctHukeDo) Where(conds ...gen.Condition) IUctHukeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u uctHukeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUctHukeDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u uctHukeDo) Order(conds ...field.Expr) IUctHukeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u uctHukeDo) Distinct(cols ...field.Expr) IUctHukeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u uctHukeDo) Omit(cols ...field.Expr) IUctHukeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u uctHukeDo) Join(table schema.Tabler, on ...field.Expr) IUctHukeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u uctHukeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUctHukeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u uctHukeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUctHukeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u uctHukeDo) Group(cols ...field.Expr) IUctHukeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u uctHukeDo) Having(conds ...gen.Condition) IUctHukeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u uctHukeDo) Limit(limit int) IUctHukeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u uctHukeDo) Offset(offset int) IUctHukeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u uctHukeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUctHukeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u uctHukeDo) Unscoped() IUctHukeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u uctHukeDo) Create(values ...*model.UctHuke) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u uctHukeDo) CreateInBatches(values []*model.UctHuke, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u uctHukeDo) Save(values ...*model.UctHuke) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u uctHukeDo) First() (*model.UctHuke, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctHuke), nil
	}
}

func (u uctHukeDo) Take() (*model.UctHuke, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctHuke), nil
	}
}

func (u uctHukeDo) Last() (*model.UctHuke, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctHuke), nil
	}
}

func (u uctHukeDo) Find() ([]*model.UctHuke, error) {
	result, err := u.DO.Find()
	return result.([]*model.UctHuke), err
}

func (u uctHukeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UctHuke, err error) {
	buf := make([]*model.UctHuke, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u uctHukeDo) FindInBatches(result *[]*model.UctHuke, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u uctHukeDo) Attrs(attrs ...field.AssignExpr) IUctHukeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u uctHukeDo) Assign(attrs ...field.AssignExpr) IUctHukeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u uctHukeDo) Joins(fields ...field.RelationField) IUctHukeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u uctHukeDo) Preload(fields ...field.RelationField) IUctHukeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u uctHukeDo) FirstOrInit() (*model.UctHuke, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctHuke), nil
	}
}

func (u uctHukeDo) FirstOrCreate() (*model.UctHuke, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UctHuke), nil
	}
}

func (u uctHukeDo) FindByPage(offset int, limit int) (result []*model.UctHuke, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u uctHukeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u uctHukeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u uctHukeDo) Delete(models ...*model.UctHuke) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *uctHukeDo) withDO(do gen.Dao) *uctHukeDo {
	u.DO = *do.(*gen.DO)
	return u
}
